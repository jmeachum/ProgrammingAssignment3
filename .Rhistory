data <- do.call(rbind, tmp)
cc <- complete(directory)
IDs <- cc[cc$nobs >= threshold,"id"]
answer <- numeric()
corrData <- data.frame()
for(i in IDs){
corrData <- data[data$ID == i,]
answer <- c(answer,cor(corrData[,"nitrate"],corrData[,"sulfate"]))
}
answer
#as.numeric(sprintf(answer, fmt='%#.5f'))
}
cr <- corr("specdata")
cr
answer
cr
threshold
IDs <- cc[cc$nobs >= threshold,"id"]
answer <- numeric()
corrData <- data.frame()
for(i in IDs){
corrData <- data[data$ID == i,]
answer <- c(answer,cor(corrData[,"nitrate"],corrData[,"sulfate"]))
}
answer
test <- c("1","NA")
test
as.numeric(test)
test
test1 < - as.numeric(test)
test1 <- as.numeric(test)
test1
testVals <- c("1","NA")
class(test1)
character
help("character")
IDs
answer <- character()
corrData <- data.frame()
for(i in IDs){
corrData <- data[data$ID == i,]
answer <- c(answer,cor(corrData[,"nitrate"],corrData[,"sulfate"]))
}
answer
corData <- data[data$ID == 1,]
corData
cor(corrData[,"nitrate"],corrData[,"sulfate"])
cor(corrData[,"nitrate"],corrData[,"sulfate"],use = "complete.obs")
help("cor")
cor(corrData[,"nitrate"],corrData[,"sulfate"],use = "na.or.complete.obs")
cor(corrData[,"nitrate"],corrData[,"sulfate"],use = "na.or.complete")
IDs <- cc[cc$nobs == threshold,"id"]
IDs
corrData <- data[data$ID == 275,]
corData
cor(corrData[,"nitrate"],corrData[,"sulfate"],use = "na.or.complete")
corr <- function(directory, threshold = 0) {
files <- list.files(directory, full.names=TRUE)
tmp <- lapply(files, read.csv)
data <- do.call(rbind, tmp)
cc <- complete(directory)
IDs <- cc[cc$nobs >= threshold,"id"]
answer <- numeric()
corrData <- data.frame()
for(i in IDs){
corrData <- data[data$ID == i,]
answer <- c(answer,cor(corrData[,"nitrate"],corrData[,"sulfate"],use = "na.or.complete"))
}
answer
#as.numeric(sprintf(answer, fmt='%#.5f'))
}
class(answer)
answer <- numeric()
answer <- cor(corrData[,"nitrate"],corrData[,"sulfate"],use = "na.or.complete")
class(answer)
answer
cr <- corr("specdata")
cr
summary(cr)
length(cr)
corrData <- data[data$ID == 275,]
help(complete.cases)
cr
cr <- is.na(cr)
cr
cr <- corr("specdata")
cr
cr2 <- cr
cr2 <- cr2[!is.na(cr2)]
cr2
length(cr2)
corr <- function(directory, threshold = 0) {
files <- list.files(directory, full.names=TRUE)
tmp <- lapply(files, read.csv)
data <- do.call(rbind, tmp)
cc <- complete(directory)
IDs <- cc[cc$nobs >= threshold,"id"]
answer <- numeric()
corrData <- data.frame()
for(i in IDs){
corrData <- data[data$ID == i,]
answer <- c(answer,cor(corrData[,"nitrate"],corrData[,"sulfate"],use = "na.or.complete"))
}
answer <- answer[!is.na(answer)]
#as.numeric(sprintf(answer, fmt='%#.5f'))
}
cr <- corr("specdata")
cr
summary(cr)
length(cr)
submit()
submit()
submit()
submit()
help("str.dendrogram")
str()
traceback()
library(datasets)
data("iris")
?iris
iris
str(iris)
set.seed(1)
rpois(5, 2)
help(qpois)
help(rep)
eval <- 546cf08dfbef162178d880c56d0663e2a1a2e212
eval <- "546cf08dfbef162178d880c56d0663e2a1a2e212""
xz
eval <- "546cf08dfbef162178d880c56d0663e2a1a2e212"
eval2 <- "546cf08dfbef162178d880c56d0663e2a1a2e212"
identical(eval,eval2)
help("history")
history
history()
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
getwd()
setwd("C:/Users/jmeachum/Documents/R/R_Coursera/ProgAssign3/")
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
data <- data[,c(2,7,15,21,27)]
data
str(data)
names(data)
help(switch)
help("split")
split(data,data[,2])
help(min)
names(data)
help(rename)
install.packages("dplyr")
library(dplyr)
help(rename)
data$Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
names(data)[3]
names(data)[3] <- "heart attack"
names(data)[3]
data
names(data)[4]
allStates <- unique(data[,2])
allstates
allStates
help(min)
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
names(data)
str(data)
data[data$State]
data[data$State,]
data[data$State = "TS",]
data[data$State = "TX",]
data[data$State == "TX",]
data[data$State == "TX" & data$Hospital.Name == "CYPRESS FAIRBANKS MEDICAL CENTER",]
data[data$State == "TX" & data$Hospital.Name == "FORT DUNCAN MEDICAL CENTER",]
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
View(data)
data <- data[,c(2,7,13,19,25)]
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
data
data[data$State == "TX" & data$Hospital.Name == "CYPRESS FAIRBANKS MEDICAL CENTER",]
head(arrange(data, "heart attack"))
arrange(data, "heart attack")
min(data[,"heart attack"])
head(data)
help(which)
which(data[,"heart attack"] %in% sort(data[,"heart attack"]))
which(data[data$`heart attack`,] %in% sort(data[data$`heart attack`]))
which(data[data$`heart attack`,] %in% sort(data[data$`heart attack`,]))
which(data[data$`heart attack`,] %in% sort(data[data$`heart attack`,][1]))
help(by)
state = "TX"
data <- data[data$State == state,[1:3]]
data <- data[data$State == state,1:3]
data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
data <- data[,c(2,7,13,19,25)]
data <- data[data$State == state,c(1:2,4)
]
data
help(transform)
data <- transform(data, data[,3] = as.numeric(data[,3]))
data <- transform(data, 3 = as.numeric(3))
head(data)
names(data[3])
data <- transform(data, names(data[3]) = as.numeric(names(data[3]))
sapply(data, mode)
transform(data, names(data[3]) = as.numeric(names(data[3]))
d <- data.frame(char = letters[1:5],
fake_char = as.character(1:5),
fac = factor(1:5),
char_fac = factor(letters[1:5]),
num = 1:5, stringsAsFactors = FALSE)
d
transform(d, char = as.numeric(char))
names(data[3])
transform(data,Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = as.numeric(Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
data
data1 <- transform(data,Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = as.numeric(Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure))
data1
help("colnames")
cname <- names(data[3])
cname
data1 <- transform(data, cname = as.numeric(cname))
data1
cname
data1 <- transform(data, data[,3] = as.numeric(data[,3]))
data1[,3] <- as.numeric(data[,3]))
data1[,3] <- as.numeric(data[,3])
data1
data1 <- lapply(data1,function(x){x[order(x[,3]),]})
help(order)
order(data[,3])
data[order(data[,3]),]
data1[order(data1[,3]),]
names(data1)[3] <- "heart attack"
data1[order(data1[,3]),]
data1[order(data1[,3],data1[,2]),]
data1[order(data1[,3],data1[,1]),]
data1 <- data1[order(data1[,3],data1[,1]),]
data1[1,1]
best <- function(state,outcome){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## purge data of all columns not needed and rename column to match values
## this will make it easier to sort by column later
data <- data[,c(2,7,11,17,23)]
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Check that state and outcome are valid
## Get all unique state abbreviations from dataset
allStates <- unique(data[,2])
## Tests if value provided to function is in the list of states
## If not return error message
if(is.element(state,allStates)){
validOutcomes <- c("heart attack","heart failure","pneumonia")
## Now we test for valid outcome. If valid proceed to look up data
## If not return error message
if(is.element(outcome,validOutcomes)){
##Trim down the data set to only what we need
switch(outcome,
"heart attack" = data <- data[data$State == state,1:3],
"heart failure" = data <- data[data$State == state,c(1:2,4)],
"pneumonia" = data <- data[data$State == state,c(1:2,5)])
## Make column 3 numeric
data[,3] <- as.numeric(data[,3])
data <- data[order(data[,3],data[,1]),]
Hospital.Name <- data[1,1]
}
else{
stop("invalid outcome")
}
}
else{
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
return(Hospital.Name)
## rate
}
best("TX", "heart attack")
best("TX", "heart attack")
help("suppressWarnings")
best <- function(state,outcome){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## purge data of all columns not needed and rename column to match values
## this will make it easier to sort by column later
data <- data[,c(2,7,11,17,23)]
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Check that state and outcome are valid
## Get all unique state abbreviations from dataset
allStates <- unique(data[,2])
## Tests if value provided to function is in the list of states
## If not return error message
if(is.element(state,allStates)){
validOutcomes <- c("heart attack","heart failure","pneumonia")
## Now we test for valid outcome. If valid proceed to look up data
## If not return error message
if(is.element(outcome,validOutcomes)){
##Trim down the data set to only what we need
switch(outcome,
"heart attack" = data <- data[data$State == state,1:3],
"heart failure" = data <- data[data$State == state,c(1:2,4)],
"pneumonia" = data <- data[data$State == state,c(1:2,5)])
## Make column 3 numeric
data[,3] <- suppressWarnings(as.numeric(data[,3]))
data <- data[order(data[,3],data[,1]),]
Hospital.Name <- data[1,1]
}
else{
stop("invalid outcome")
}
}
else{
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
return(Hospital.Name)
## rate
}
best("TX", "heart attack")
best("TX", "heart failure")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
submit()
0
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## purge data of all columns not needed and rename column to match values
## this will make it easier to sort by column later
data <- data[,c(2,7,11,17,23)]
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
state = "TX"
outcome = "heart failure"
switch(outcome,
"heart attack" = data <- data[data$State == state,1:3],
"heart failure" = data <- data[data$State == state,c(1:2,4)],
"pneumonia" = data <- data[data$State == state,c(1:2,5)])
data
data[,3] <- suppressWarnings(as.numeric(data[,3]))
data
is.na(data[,3]
)
data[is.na(data[,3]),]
data[!is.na(data[,3]),]
data <- data[!is.na(data[,3]),]
data <- data[order(data[,3],data[,1]),]
data
length(data)
length(data[,3])
test <- as.numeric(1:2)
test
test <- as.numeric(1:length(data[,3]))
test
data[,4]
data[,4] <- as.numeric(1:length(data[,3]))
data
names(data)[4] <- "Rank"
data
data[length(data[,3],1]
data[length(data[,3]),1])
data[length(data[,3]),1]
num <- "best"
if(num == "best" || num == "worst")
{print(TRUE)}
if(num == "best" || num == "worst"){print(TRUE)}Else{print(FALSE)}
if(num == "best" || num == "worst"){
print(TRUE)}
else{print(FALSE)}
num = 1
if(num == "best" || num == "worst"){
print(TRUE)}
else{print(FALSE)}
num = 2
num
data[num,1]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## purge data of all columns not needed and rename column to match values
## this will make it easier to sort by column later
data <- data[,c(2,7,11,17,23)]
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Check that state and outcome are valid
## Get all unique state abbreviations from dataset
allStates <- unique(data[,2])
## Tests if value provided to function is in the list of states
## If not return error message
if(is.element(state,allStates)){
validOutcomes <- c("heart attack","heart failure","pneumonia")
## Now we test for valid outcome. If valid proceed to look up data
## If not return error message
if(is.element(outcome,validOutcomes)){
##Trim down the data set to only what we need
switch(outcome,
"heart attack" = data <- data[data$State == state,1:3],
"heart failure" = data <- data[data$State == state,c(1:2,4)],
"pneumonia" = data <- data[data$State == state,c(1:2,5)])
## Make column 3 numeric
data[,3] <- suppressWarnings(as.numeric(data[,3]))
## Remove NAs
data <- data[!is.na(data[,3]),]
## Order data
data <- data[order(data[,3],data[,1]),]
## Add column to data.frame that ranks in numerical order
## getting length of rows
data[,4] <- as.numeric(1:length(data[,3]))
if(num == "best" || num == "worst"){
switch(num,
"best" = Hospital.Name <- data[1,1],
"worst" = Hospital.Name <- data[length(data[,3]),1]
)
}
else if(num > length(data[,3])){
Hospital.Name <- "NA"
}
else{
Hospital.Name <- data[num,1]
}
}
else{
stop("invalid outcome")
}
}
else{
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
return(Hospital.Name)
## rate
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## purge data of all columns not needed and rename column to match values
## this will make it easier to sort by column later
data <- data[,c(2,7,11,17,23)]
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Check that state and outcome are valid
## Get all unique state abbreviations from dataset
allStates <- unique(data[,2])
## Tests if value provided to function is in the list of states
## If not return error message
if(is.element(state,allStates)){
validOutcomes <- c("heart attack","heart failure","pneumonia")
## Now we test for valid outcome. If valid proceed to look up data
## If not return error message
if(is.element(outcome,validOutcomes)){
##Trim down the data set to only what we need
switch(outcome,
"heart attack" = data <- data[data$State == state,1:3],
"heart failure" = data <- data[data$State == state,c(1:2,4)],
"pneumonia" = data <- data[data$State == state,c(1:2,5)])
## Make column 3 numeric
data[,3] <- suppressWarnings(as.numeric(data[,3]))
## Remove NAs
data <- data[!is.na(data[,3]),]
## Order data
data <- data[order(data[,3],data[,1]),]
## Add column to data.frame that ranks in numerical order
## getting length of rows
data[,4] <- as.numeric(1:length(data[,3]))
if(num == "best" || num == "worst"){
switch(num,
"best" = Hospital.Name <- data[1,1],
"worst" = Hospital.Name <- data[length(data[,3]),1]
)
}
else if(num > length(data[,3])){
Hospital.Name <- NA
}
else{
Hospital.Name <- data[num,1]
}
}
else{
stop("invalid outcome")
}
}
else{
stop("invalid state")
}
## Return hospital name in that state with lowest 30-day death
return(Hospital.Name)
## rate
}
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
